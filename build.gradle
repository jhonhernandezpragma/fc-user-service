plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.pragma.fc'
version = '0.0.1-SNAPSHOT'
description = 'User microservice'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = "1.6.3"
    lombokVersion = "1.18.38"
    lombokMapstructBindingVersion = "0.2.0"
    openApiStarterVersion = "2.8.11"
    springSecurityVersion = "6.5.3"
    openapiWebMvcUIVersion = "2.8.11"
    jjwtVersion = "0.11.5"
}

dependencies {
    // Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation "org.springframework.security:spring-security-core:${springSecurityVersion}"

    // Flyway + DB
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    // Mapstruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // Jackson
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Springdoc
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiStarterVersion}"

    // JUnit
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JJWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}